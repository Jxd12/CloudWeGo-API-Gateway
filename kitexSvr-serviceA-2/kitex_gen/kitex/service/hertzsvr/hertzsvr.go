// Code generated by Kitex v0.6.1. DO NOT EDIT.

package hertzsvr

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	service "kitexSvr-serviceA-2/kitex_gen/kitex/service"
)

func serviceInfo() *kitex.ServiceInfo {
	return hertzSvrServiceInfo
}

var hertzSvrServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "HertzSvr"
	handlerType := (*service.HertzSvr)(nil)
	methods := map[string]kitex.MethodInfo{
		"Add": kitex.NewMethodInfo(addHandler, newHertzSvrAddArgs, newHertzSvrAddResult, false),
		"Sub": kitex.NewMethodInfo(subHandler, newHertzSvrSubArgs, newHertzSvrSubResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "service",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*service.HertzSvrAddArgs)
	realResult := result.(*service.HertzSvrAddResult)
	success, err := handler.(service.HertzSvr).Add(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newHertzSvrAddArgs() interface{} {
	return service.NewHertzSvrAddArgs()
}

func newHertzSvrAddResult() interface{} {
	return service.NewHertzSvrAddResult()
}

func subHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*service.HertzSvrSubArgs)
	realResult := result.(*service.HertzSvrSubResult)
	success, err := handler.(service.HertzSvr).Sub(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newHertzSvrSubArgs() interface{} {
	return service.NewHertzSvrSubArgs()
}

func newHertzSvrSubResult() interface{} {
	return service.NewHertzSvrSubResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Add(ctx context.Context, request *service.Request) (r *service.Response, err error) {
	var _args service.HertzSvrAddArgs
	_args.Request = request
	var _result service.HertzSvrAddResult
	if err = p.c.Call(ctx, "Add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Sub(ctx context.Context, request *service.Request) (r *service.Response, err error) {
	var _args service.HertzSvrSubArgs
	_args.Request = request
	var _result service.HertzSvrSubResult
	if err = p.c.Call(ctx, "Sub", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
