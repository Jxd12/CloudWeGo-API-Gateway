// Code generated by hertz generator.

package service

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"hertzSvr/biz/handler/hertzSvr/utils"
	"hertzSvr/biz/model/hertzSvr/service"
)

// Request .
// @router /request [POST]
func Request(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.SvrRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(service.SvrResponse)

	c.JSON(consts.StatusOK, resp)
}

// AddIDL .
// @router /AddIDL [POST]
func AddIDL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.RegisterIDL
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	provider := utils.NewProvider(req.Idl)
	cli := utils.NewClient(req.Name, provider, resolver)
	clientInfo := ClientInfo{
		provider: provider,
		cli:      cli,
	}
	clients[req.Name] = clientInfo

	resp := new(service.SvrResponse)
	resp.Success = true
	resp.Message = "add"
	c.JSON(consts.StatusOK, resp)
}

// DeleteIDL .
// @router /DeleteIDL [POST]
func DeleteIDL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.IDLMessage
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	delete(clients, req.Name)

	resp := new(service.SvrResponse)
	resp.Success = true
	resp.Message = "delete"

	c.JSON(consts.StatusOK, resp)
}

// UpdateIDL .
// @router UpdateIDL [POST]
func UpdateIDL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.RegisterIDL
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	provider := utils.NewProvider(req.Idl)
	cli := utils.NewClient(req.Name, provider, resolver)
	clientInfo := ClientInfo{
		provider: provider,
		cli:      cli,
	}
	clients[req.Name] = clientInfo

	resp := new(service.SvrResponse)
	resp.Success = true
	resp.Message = "update"
	c.JSON(consts.StatusOK, resp)
}

// QueryIDL .
//
// @router /QueryIDL [POST]
func QueryIDL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.IDLMessage
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(service.SvrResponse)
	resp.Success = false

	if _, ok := clients[req.Name]; ok {
		resp.Success = true
	}
	resp.Message = "query"

	c.JSON(consts.StatusOK, resp)
}
