// Code generated by hertz generator.

package idlManager

import (
	"context"
	"hertzSvr-Gateway/biz/handler/hertzSvr"
	"hertzSvr-Gateway/biz/handler/hertzSvr/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	idlManager "hertzSvr-Gateway/biz/model/hertzSvr/idlManager"
)

// UpdateIDL .
// @router /idl/update [POST]
func UpdateIDL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req idlManager.IDLMessage
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var clientInfo hertzSvr.ClientInfo

	// 调用idl管理平台API，查找对应service的idl
	idlContent := GetIDLContent(req.SvcName)

	// 判断服务对应的client是否存在
	if _, isOk := hertzSvr.Clients[req.SvcName]; isOk {
		// 若client已存在，则provider进行热更新
		clientInfo = hertzSvr.Clients[req.SvcName]
		err = clientInfo.Provider.UpdateIDL(idlContent, map[string]string{})
		if err != nil {
			c.JSON(consts.StatusOK, &idlManager.IDLResponse{
				Success: false,
				Message: "Error: fail to update IDL of service " + req.SvcName,
			})
			return
		}
	} else {
		// 若client不存在，则创建provider
		provider, err := utils.NewProvider(idlContent)
		if err != nil {
			c.JSON(consts.StatusBadRequest, &hertzSvr.Response{
				Success: false,
				Message: "Error: fail to load idl for service " + req.SvcName + "." + err.Error(),
			})
			return
		}
		clientInfo.Provider = provider
		clientInfo.Cli, err = utils.NewClient(req.SvcName, provider, hertzSvr.Resolver)
		if err != nil {
			c.JSON(consts.StatusBadRequest, &hertzSvr.Response{
				Success: false,
				Message: "Error: fail to make new client for service " + req.SvcName + "." + err.Error(),
			})
		}
		hertzSvr.Clients[req.SvcName] = clientInfo
	}

	resp := &idlManager.IDLResponse{
		Success: true,
		Message: "Update " + req.SvcName + " IDL success",
	}

	c.JSON(consts.StatusOK, resp)
}
