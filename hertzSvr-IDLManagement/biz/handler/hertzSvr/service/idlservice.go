// Code generated by hertz generator.

package service

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	service "hertzSvr-IDLManagement/biz/model/hertzSvr/service"
)

// AddIDL .
// @router /idlManager/add [POST]
func AddIDL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.IDLInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(service.IDLResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteIDL .
// @router /idlManager/delete [POST]
func DeleteIDL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.IDLMessage
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(service.IDLResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateIDL .
// @router /idlManager/update [POST]
func UpdateIDL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.IDLInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(service.IDLResponse)

	c.JSON(consts.StatusOK, resp)
}

// QueryIDL .
// @router /idlManager/query [GET]
func QueryIDL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.IDLQueryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := service.IDLInfo{
		Name: req.Name,
		Idl:  idls[req.Name],
	}

	c.JSON(consts.StatusOK, resp)
}

var idls = map[string]string{
	"FirstLevelCalService":  idlContentA,
	"SecondLevelCalService": idlContentB,
	"AdvancedCalService":    idlContentC,
}

var idlContentA = `
namespace go kitex.service

struct Request{
    1: i32 operand_1 (api.body="operand_1")
    2: i32 operand_2 (api.body="operand_2")
}

struct Response{
    1: bool success (api.body="success")
    2: string message (api.body="message")
    3: i32 data (api.body="data")
}

service FirstLevelCalService{
    Response Add(1: Request request)(api.post="/gateway/FirstLevelCalService/add")
    Response Sub(1: Request request)(api.post="/gateway/FirstLevelCalService/sub")
}`

var idlContentB = `
namespace go kitex.service

struct Request{
    1: i32 operand_1 (api.body="operand_1")
    2: i32 operand_2 (api.body="operand_2")
}

struct Response{
    1: bool success (api.body="success")
    2: string message (api.body="message")
    3: i32 data (api.body="data")
}

service SecondLevelCalService{
    Response Mul(1: Request request)(api.post="/gateway/SecondLevelCalService/mul")
    Response Div(1: Request request)(api.post="/gateway/SecondLevelCalService/div")
}`

var idlContentC = `
namespace go kitex.service

struct Request{
    1: i32 operand (api.body="operand")
}

struct Response{
    1: bool success (api.body="success")
    2: string message (api.body="message")
    3: i32 data (api.body="data")
}

service AdvancedCalService{
    Response Fact(1: Request request)(api.post="/gateway/AdvancedCalService/fact")
    Response Fib(1: Request request)(api.post="/gateway/AdvancedCalService/fib")
}
`
